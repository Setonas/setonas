# Grammar for Python

# Note:  Changing the grammar specified in this file will most likely
#        require corresponding changes in the parser module
#        (../Modules/parsermodule.c).  If you can't make the changes to
#        that module yourself, please co-ordinate the required changes
#        with someone who can; ask around on python-dev for help.  Fred
#        Drake <fdrake@acm.org> will probably be listening there.

# NOTE WELL: You should also follow all the steps listed at
# https://docs.python.org/devguide/grammar.html

# Start symbols for the grammar:
#       single_input is a single interactive statement;
#       file_input is a module or sequence of commands read from an input file;
#       eval_input is the input for the eval() functions.
# NB: compound_stmt in single_input is followed by extra NEWLINE!
single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
file_input: (NEWLINE | stmt)* ENDMARKER
eval_input: testlist NEWLINE* ENDMARKER

decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
decorators: decorator+
decorated: decorators (classdef | funcdef)
funcdef: ('def'|'apibrėžti')  NAME parameters ['->' test] ':' suite
parameters: '(' [typedargslist] ')'
typedargslist: (tfpdef ['=' test] (',' tfpdef ['=' test])* [','
       ['*' [tfpdef] (',' tfpdef ['=' test])* [',' '**' tfpdef] | '**' tfpdef]]
     |  '*' [tfpdef] (',' tfpdef ['=' test])* [',' '**' tfpdef] | '**' tfpdef)
tfpdef: NAME [':' test]
varargslist: (vfpdef ['=' test] (',' vfpdef ['=' test])* [','
       ['*' [vfpdef] (',' vfpdef ['=' test])* [',' '**' vfpdef] | '**' vfpdef]]
     |  '*' [vfpdef] (',' vfpdef ['=' test])* [',' '**' vfpdef] | '**' vfpdef)
vfpdef: NAME

stmt: simple_stmt | compound_stmt
simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |
             import_stmt | global_stmt | nonlocal_stmt | assert_stmt)
expr_stmt: testlist_star_expr (augassign (yield_expr|testlist) |
                     ('=' (yield_expr|testlist_star_expr))*)
testlist_star_expr: (test|star_expr) (',' (test|star_expr))* [',']
augassign: ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
            '<<=' | '>>=' | '**=' | '//=')
# For normal assignments, additional restrictions enforced by the interpreter
del_stmt: ('del'|'pan') exprlist
pass_stmt: ('pass'|'pereiti')
flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
break_stmt: ('break'|'pertrauka')
continue_stmt: ('continue'|'tęsti')
return_stmt: ('return'|'sugrįžti') [testlist]
yield_stmt: yield_expr
raise_stmt: ('raise'|'kelti') [test ['from' test]]
import_stmt: import_name | import_from
import_name: ('import'|'importas')  dotted_as_names
# note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
import_from: (('from'|'nuo') (('.' | '...')* dotted_name | ('.' | '...')+)
              ('import'|'importas') ('*' | '(' import_as_names ')' | import_as_names))
import_as_name: NAME [('as'|'kaip') NAME]
dotted_as_name: dotted_name [('as'|'kaip') NAME]
import_as_names: import_as_name (',' import_as_name)* [',']
dotted_as_names: dotted_as_name (',' dotted_as_name)*
dotted_name: NAME ('.' NAME)*
global_stmt: ('global' | 'globalinis') NAME (',' NAME)*
nonlocal_stmt: ('nonlocal' | 'nelokaliosiomis') NAME (',' NAME)*
assert_stmt: ('assert'|'teigti') test [',' test]

compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated
if_stmt: ('if' | 'jei') test ':' suite (('elif' | 'kijei') test ':' suite)* [('else' | 'kitas') ':' suite]
while_stmt: ('while'|'kol') test ':' suite [('else' | 'kitas') ':' suite]
for_stmt: ('for' | 'dėl') exprlist ('in' | 'iš') testlist ':' suite [('else' | 'kitas') ':' suite]
try_stmt: (('try' | 'bandyti') ':' suite
           ((except_clause ':' suite)+
            [('else' | 'kitas') ':' suite]
            [('finally' | 'pagaliau') ':' suite] |
           ('finally' | 'pagaliau') ':' suite))
with_stmt: ('with' | 'su') with_item (',' with_item)*  ':' suite
with_item: test [('as' | 'kaip') expr]
# NB compile.c makes sure that the default except clause is last
except_clause: ('except' | 'išskyrus') [test [('as' | 'kaip') NAME]]
suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT

test: or_test [('if' | 'jei') or_test ('else' | 'kitas') test] | lambdef
test_nocond: or_test | lambdef_nocond
lambdef: ('lambda' | 'liambda') [varargslist] ':' test
lambdef_nocond: ('lambda' | 'liambda') [varargslist] ':' test_nocond
or_test: and_test (('or' | 'arba') and_test)*
and_test: not_test (('and' | 'ir') not_test)*
not_test: ('not' | 'nebūtų') not_test | comparison
comparison: expr (comp_op expr)*
# <> isn't actually a valid comparison operator in Python. It's here for the
# sake of a __future__ import described in PEP 401
comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|('in' | 'iš')|('not' | 'nebūtų') ('in' | 'iš')|('is' | 'yra')|('is' | 'yra') ('not' | 'nebūtų')
star_expr: '*' expr
expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&' shift_expr)*
shift_expr: arith_expr (('<<'|'>>') arith_expr)*
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'/'|'%'|'//') factor)*
factor: ('+'|'-'|'~') factor | power
power: atom trailer* ['**' factor]
atom: ('(' [yield_expr|testlist_comp] ')' |
       '[' [testlist_comp] ']' |
       '{' [dictorsetmaker] '}' |
       NAME | NUMBER | STRING+ | '...' | 'None' | 'True' | 'False')
testlist_comp: (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )
trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
subscriptlist: subscript (',' subscript)* [',']
subscript: test | [test] ':' [test] [sliceop]
sliceop: ':' [test]
exprlist: (expr|star_expr) (',' (expr|star_expr))* [',']
testlist: test (',' test)* [',']
dictorsetmaker: ( (test ':' test (comp_for | (',' test ':' test)* [','])) |
                  (test (comp_for | (',' test)* [','])) )

classdef: ('class'|'rūšis') NAME ['(' [arglist] ')'] ':' suite

arglist: (argument ',')* (argument [',']
                         |'*' test (',' argument)* [',' '**' test] 
                         |'**' test)
# The reason that keywords are test nodes instead of NAME is that using NAME
# results in an ambiguity. ast.c makes sure it's a NAME.
argument: test [comp_for] | test '=' test  # Really [keyword '='] test
comp_iter: comp_for | comp_if
comp_for: ('for' | 'dėl') exprlist ('in' | 'iš') or_test [comp_iter]
comp_if: ('if' | 'jei') test_nocond [comp_iter]

# not used in grammar, but may appear in "node" passed from Parser to Compiler
encoding_decl: NAME

yield_expr: ('yield' | 'duoti') [yield_arg]
yield_arg: ('from' | 'nuo') test | testlist
